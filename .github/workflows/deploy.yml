name: CI/CD Pipeline for detection of urban-waste

on:
  push:
    branches:
      - master  # Trigger the pipeline on changes to the master branch

jobs:
  # Continuous Integration
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment and dependencies
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Use the version that matches your project

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

  # Continuous Delivery
  push_to_ecr:
    runs-on: ubuntu-latest
    needs: build  # Ensures this job only runs after the build job succeeds
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI
      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1  # Replace with your region

      # Step 3: Log in to AWS ECR
      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 961341555760.dkr.ecr.us-east-1.amazonaws.com

      # Step 4: Build and push Docker image to AWS ECR
      - name: Build and Push Docker image
        run: |
          docker build -t urban-waste .
          docker tag urban-waste:latest 961341555760.dkr.ecr.us-east-1.amazonaws.com/urban-waste
          docker push 825765397104.dkr.ecr.us-east-1.amazonaws.com/urban-waste:latest

  # Continuous Deployment
  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: push_to_ecr  # This job will only run after the image is pushed to ECR
    
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SSH agent to use the private key for EC2 access
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}  # Replace with your private key stored in GitHub Secrets

      # Step 3: Install Docker on EC2 (if not installed already)
      - name: Install Docker
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@54.82.64.213 << EOF
            # Update and install Docker if not already installed
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu  # Ensure the user can run Docker commands
          EOF

      # Step 4: Configure AWS CLI on EC2
      - name: Configure AWS CLI
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@54.82.64.213 << EOF
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region us-east-1 # Replace with your region
          EOF

      # Step 5: Deploy to EC2 instance
      - name: Deploy to EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@54.82.64.213 << EOF
            # Stop and remove any running container on port 8080
            CONTAINER_ID=$(sudo docker ps -q -f "ancestor=961341555760.dkr.ecr.us-east-1.amazonaws.com/urban-waste:latest")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            else
              echo "No running container found with urban-waste image."
            fi

            # Optionally remove old images if needed
            IMAGE_ID=$(sudo docker images -q 961341555760.dkr.ecr.us-east-1.amazonaws.com/urban-waste:latest)
            if [ ! -z "$IMAGE_ID" ]; then
              sudo docker rmi $IMAGE_ID
            else
              echo "No image found for removal."
            fi

            # Login to AWS ECR
            aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 961341555760.dkr.ecr.us-east-1.amazonaws.com/urban-waste
            
            # Pull the Docker image from ECR
            sudo docker pull 961341555760.dkr.ecr.us-east-1.amazonaws.com/urban-waste

            # Run the Docker container on EC2
            sudo docker run -d -p 8080:8080 961341555760.dkr.ecr.us-east-1.amazonaws.com/urban-waste:latest
          EOF

      # Optional: Check the running container logs (for debugging purposes)
      - name: Check Docker container logs
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@54.82.64.213 << EOF
            sudo docker ps
          EOF
